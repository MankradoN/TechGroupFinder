{"ast":null,"code":"import { doFilterValuesMatch } from \"../helpers\";\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\n\nexport default function addFilter(name, value) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\";\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"addFilter\", ...arguments);\n  const {\n    filters\n  } = this.state;\n  const existingFilter = filters.find(f => f.field === name && f.type === type) || {};\n  const allOtherFilters = filters.filter(f => f.field !== name || f.type !== type) || [];\n  const existingFilterValues = existingFilter.values || [];\n  const newFilterValues = existingFilterValues.find(existing => doFilterValuesMatch(existing, value)) ? existingFilterValues : existingFilterValues.concat(value);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [...allOtherFilters, {\n      field: name,\n      values: newFilterValues,\n      type\n    }]\n  });\n}","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/my-app/node_modules/@elastic/search-ui/lib/esm/actions/addFilter.js"],"names":["doFilterValuesMatch","addFilter","name","value","type","debug","console","log","arguments","filters","state","existingFilter","find","f","field","allOtherFilters","filter","existingFilterValues","values","newFilterValues","existing","concat","_updateSearchResults","current"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,YAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAA8C;AAAA,MAAdC,IAAc,uEAAP,KAAO;AACzD;AACA,MAAI,KAAKC,KAAT,EACIC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,WAAjC,EAA8C,GAAGC,SAAjD;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAc,KAAKC,KAAzB;AACA,QAAMC,cAAc,GAAGF,OAAO,CAACG,IAAR,CAAcC,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYZ,IAAZ,IAAoBW,CAAC,CAACT,IAAF,KAAWA,IAAnD,KAA4D,EAAnF;AACA,QAAMW,eAAe,GAAGN,OAAO,CAACO,MAAR,CAAgBH,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYZ,IAAZ,IAAoBW,CAAC,CAACT,IAAF,KAAWA,IAArD,KAA8D,EAAtF;AACA,QAAMa,oBAAoB,GAAGN,cAAc,CAACO,MAAf,IAAyB,EAAtD;AACA,QAAMC,eAAe,GAAGF,oBAAoB,CAACL,IAArB,CAA2BQ,QAAD,IAAcpB,mBAAmB,CAACoB,QAAD,EAAWjB,KAAX,CAA3D,IAClBc,oBADkB,GAElBA,oBAAoB,CAACI,MAArB,CAA4BlB,KAA5B,CAFN;;AAGA,OAAKmB,oBAAL,CAA0B;AACtBC,IAAAA,OAAO,EAAE,CADa;AAEtBd,IAAAA,OAAO,EAAE,CACL,GAAGM,eADE,EAEL;AAAED,MAAAA,KAAK,EAAEZ,IAAT;AAAegB,MAAAA,MAAM,EAAEC,eAAvB;AAAwCf,MAAAA;AAAxC,KAFK;AAFa,GAA1B;AAOH","sourcesContent":["import { doFilterValuesMatch } from \"../helpers\";\n/**\n * Filter results - Adds to current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value String field value to filter on\n * @param type String (Optional) type of filter to apply\n */\nexport default function addFilter(name, value, type = \"all\") {\n    // eslint-disable-next-line no-console\n    if (this.debug)\n        console.log(\"Search UI: Action\", \"addFilter\", ...arguments);\n    const { filters } = this.state;\n    const existingFilter = filters.find((f) => f.field === name && f.type === type) || {};\n    const allOtherFilters = filters.filter((f) => f.field !== name || f.type !== type) || [];\n    const existingFilterValues = existingFilter.values || [];\n    const newFilterValues = existingFilterValues.find((existing) => doFilterValuesMatch(existing, value))\n        ? existingFilterValues\n        : existingFilterValues.concat(value);\n    this._updateSearchResults({\n        current: 1,\n        filters: [\n            ...allOtherFilters,\n            { field: name, values: newFilterValues, type }\n        ]\n    });\n}\n"]},"metadata":{},"sourceType":"module"}