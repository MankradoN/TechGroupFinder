{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as ElasticAppSearch from \"@elastic/app-search-javascript\";\nimport { adaptResponse } from \"./responseAdapter\";\nimport { adaptRequest } from \"./requestAdapters\";\nimport buildResponseAdapterOptions from \"./buildResponseAdapterOptions\"; // The API will error out if empty facets or filters objects\n// are sent.\n\nfunction removeEmptyFacetsAndFilters(options) {\n  const {\n    facets,\n    filters\n  } = options,\n        rest = __rest(options, [\"facets\", \"filters\"]);\n\n  return Object.assign(Object.assign(Object.assign({}, facets && Object.entries(facets).length > 0 && {\n    facets\n  }), filters && Object.entries(filters).length > 0 && {\n    filters\n  }), rest);\n}\n\nclass AppSearchAPIConnector {\n  /**\n   * @param {Options} options\n   */\n  constructor(_a) {\n    var {\n      searchKey,\n      engineName,\n      beforeSearchCall = (queryOptions, next) => next(queryOptions),\n      beforeAutocompleteResultsCall = (queryOptions, next) => next(queryOptions),\n      beforeAutocompleteSuggestionsCall = (queryOptions, next) => next(queryOptions)\n    } = _a,\n        rest = __rest(_a, [\"searchKey\", \"engineName\", \"beforeSearchCall\", \"beforeAutocompleteResultsCall\", \"beforeAutocompleteSuggestionsCall\"]);\n\n    if (!engineName || !(\"hostIdentifier\" in rest || \"endpointBase\" in rest)) {\n      throw Error(\"hostIdentifier or endpointBase, and engineName are required\");\n    }\n\n    this.client = ElasticAppSearch.createClient(Object.assign(Object.assign(Object.assign(Object.assign({}, \"endpointBase\" in rest && {\n      endpointBase: rest.endpointBase\n    }), \"hostIdentifier\" in rest && {\n      hostIdentifier: rest.hostIdentifier\n    }), {\n      apiKey: searchKey,\n      engineName: engineName\n    }), rest));\n    this.beforeSearchCall = beforeSearchCall;\n    this.beforeAutocompleteResultsCall = beforeAutocompleteResultsCall;\n    this.beforeAutocompleteSuggestionsCall = beforeAutocompleteSuggestionsCall;\n  }\n\n  onResultClick(_ref) {\n    let {\n      query,\n      documentId,\n      requestId,\n      tags = []\n    } = _ref;\n    tags = tags.concat(\"results\");\n    return this.client.click({\n      query,\n      documentId,\n      requestId,\n      tags\n    });\n  }\n\n  onAutocompleteResultClick(_ref2) {\n    let {\n      query,\n      documentId,\n      requestId,\n      tags = []\n    } = _ref2;\n    tags = tags.concat(\"autocomplete\");\n    return this.client.click({\n      query,\n      documentId,\n      requestId,\n      tags\n    });\n  }\n\n  onSearch(state, queryConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        current,\n        resultsPerPage,\n        sortDirection,\n        sortField,\n        sortList\n      } = queryConfig,\n            restOfQueryConfig = __rest(queryConfig, [\"current\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"]);\n\n      const _a = adaptRequest(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, state), current !== undefined && {\n        current\n      }), resultsPerPage !== undefined && {\n        resultsPerPage\n      }), sortDirection !== undefined && {\n        sortDirection\n      }), sortField !== undefined && {\n        sortField\n      }), sortList !== undefined && {\n        sortList\n      })),\n            {\n        query\n      } = _a,\n            optionsFromState = __rest(_a, [\"query\"]);\n\n      const withQueryConfigOptions = Object.assign(Object.assign({}, restOfQueryConfig), optionsFromState);\n      const options = Object.assign({}, removeEmptyFacetsAndFilters(withQueryConfigOptions));\n      return this.beforeSearchCall(options, newOptions => __awaiter(this, void 0, void 0, function* () {\n        const response = yield this.client.search(query, newOptions);\n        return adaptResponse(response, buildResponseAdapterOptions(queryConfig));\n      }));\n    });\n  }\n\n  onAutocomplete(_ref3, queryConfig) {\n    let {\n      searchTerm\n    } = _ref3;\n    return __awaiter(this, void 0, void 0, function* () {\n      const autocompletedState = {};\n      const promises = [];\n\n      if (queryConfig.results) {\n        const _a = queryConfig.results,\n              {\n          current,\n          filters,\n          resultsPerPage,\n          sortDirection,\n          sortField,\n          sortList\n        } = _a,\n              restOfQueryConfig = __rest(_a, [\"current\", \"filters\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"]);\n\n        const _b = adaptRequest({\n          current,\n          searchTerm,\n          filters,\n          resultsPerPage,\n          sortDirection,\n          sortField,\n          sortList\n        }),\n              {\n          query\n        } = _b,\n              optionsFromState = __rest(_b, [\"query\"]);\n\n        const withQueryConfigOptions = Object.assign(Object.assign({}, restOfQueryConfig), optionsFromState);\n        const options = removeEmptyFacetsAndFilters(withQueryConfigOptions);\n        promises.push(this.beforeAutocompleteResultsCall(options, newOptions => {\n          return this.client.search(query, Object.assign(Object.assign({}, newOptions), {\n            record_analytics: false\n          })).then(response => {\n            autocompletedState.autocompletedResults = adaptResponse(response).results;\n            autocompletedState.autocompletedResultsRequestId = response.info.meta.request_id;\n          });\n        }));\n      }\n\n      if (queryConfig.suggestions) {\n        const options = queryConfig.suggestions;\n        promises.push(this.beforeAutocompleteSuggestionsCall(options, newOptions => this.client.querySuggestion(searchTerm, newOptions).then(response => {\n          autocompletedState.autocompletedSuggestions = response.results;\n          autocompletedState.autocompletedSuggestionsRequestId = response.meta.request_id;\n        })));\n      }\n\n      yield Promise.all(promises);\n      return autocompletedState;\n    });\n  }\n\n}\n\nexport default AppSearchAPIConnector;","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/my-app/node_modules/@elastic/search-ui-app-search-connector/lib/esm/AppSearchAPIConnector.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__rest","s","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","ElasticAppSearch","adaptResponse","adaptRequest","buildResponseAdapterOptions","removeEmptyFacetsAndFilters","options","facets","filters","rest","assign","entries","AppSearchAPIConnector","constructor","_a","searchKey","engineName","beforeSearchCall","queryOptions","beforeAutocompleteResultsCall","beforeAutocompleteSuggestionsCall","Error","client","createClient","endpointBase","hostIdentifier","apiKey","onResultClick","query","documentId","requestId","tags","concat","click","onAutocompleteResultClick","onSearch","state","queryConfig","current","resultsPerPage","sortDirection","sortField","sortList","restOfQueryConfig","undefined","optionsFromState","withQueryConfigOptions","newOptions","response","search","onAutocomplete","searchTerm","autocompletedState","promises","results","_b","push","record_analytics","autocompletedResults","autocompletedResultsRequestId","info","meta","request_id","suggestions","querySuggestion","autocompletedSuggestions","autocompletedSuggestionsRequestId","all"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as ElasticAppSearch from \"@elastic/app-search-javascript\";\nimport { adaptResponse } from \"./responseAdapter\";\nimport { adaptRequest } from \"./requestAdapters\";\nimport buildResponseAdapterOptions from \"./buildResponseAdapterOptions\";\n// The API will error out if empty facets or filters objects\n// are sent.\nfunction removeEmptyFacetsAndFilters(options) {\n    const { facets, filters } = options, rest = __rest(options, [\"facets\", \"filters\"]);\n    return Object.assign(Object.assign(Object.assign({}, (facets && Object.entries(facets).length > 0 && { facets })), (filters && Object.entries(filters).length > 0 && { filters })), rest);\n}\nclass AppSearchAPIConnector {\n    /**\n     * @param {Options} options\n     */\n    constructor(_a) {\n        var { searchKey, engineName, beforeSearchCall = (queryOptions, next) => next(queryOptions), beforeAutocompleteResultsCall = (queryOptions, next) => next(queryOptions), beforeAutocompleteSuggestionsCall = (queryOptions, next) => next(queryOptions) } = _a, rest = __rest(_a, [\"searchKey\", \"engineName\", \"beforeSearchCall\", \"beforeAutocompleteResultsCall\", \"beforeAutocompleteSuggestionsCall\"]);\n        if (!engineName || !(\"hostIdentifier\" in rest || \"endpointBase\" in rest)) {\n            throw Error(\"hostIdentifier or endpointBase, and engineName are required\");\n        }\n        this.client = ElasticAppSearch.createClient(Object.assign(Object.assign(Object.assign(Object.assign({}, (\"endpointBase\" in rest && { endpointBase: rest.endpointBase })), (\"hostIdentifier\" in rest && { hostIdentifier: rest.hostIdentifier })), { apiKey: searchKey, engineName: engineName }), rest));\n        this.beforeSearchCall = beforeSearchCall;\n        this.beforeAutocompleteResultsCall = beforeAutocompleteResultsCall;\n        this.beforeAutocompleteSuggestionsCall = beforeAutocompleteSuggestionsCall;\n    }\n    onResultClick({ query, documentId, requestId, tags = [] }) {\n        tags = tags.concat(\"results\");\n        return this.client.click({ query, documentId, requestId, tags });\n    }\n    onAutocompleteResultClick({ query, documentId, requestId, tags = [] }) {\n        tags = tags.concat(\"autocomplete\");\n        return this.client.click({ query, documentId, requestId, tags });\n    }\n    onSearch(state, queryConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { current, resultsPerPage, sortDirection, sortField, sortList } = queryConfig, restOfQueryConfig = __rest(queryConfig, [\"current\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"]);\n            const _a = adaptRequest(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, state), (current !== undefined && { current })), (resultsPerPage !== undefined && { resultsPerPage })), (sortDirection !== undefined && { sortDirection })), (sortField !== undefined && { sortField })), (sortList !== undefined && { sortList }))), { query } = _a, optionsFromState = __rest(_a, [\"query\"]);\n            const withQueryConfigOptions = Object.assign(Object.assign({}, restOfQueryConfig), optionsFromState);\n            const options = Object.assign({}, removeEmptyFacetsAndFilters(withQueryConfigOptions));\n            return this.beforeSearchCall(options, (newOptions) => __awaiter(this, void 0, void 0, function* () {\n                const response = yield this.client.search(query, newOptions);\n                return adaptResponse(response, buildResponseAdapterOptions(queryConfig));\n            }));\n        });\n    }\n    onAutocomplete({ searchTerm }, queryConfig) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const autocompletedState = {};\n            const promises = [];\n            if (queryConfig.results) {\n                const _a = queryConfig.results, { current, filters, resultsPerPage, sortDirection, sortField, sortList } = _a, restOfQueryConfig = __rest(_a, [\"current\", \"filters\", \"resultsPerPage\", \"sortDirection\", \"sortField\", \"sortList\"]);\n                const _b = adaptRequest({\n                    current,\n                    searchTerm,\n                    filters,\n                    resultsPerPage,\n                    sortDirection,\n                    sortField,\n                    sortList\n                }), { query } = _b, optionsFromState = __rest(_b, [\"query\"]);\n                const withQueryConfigOptions = Object.assign(Object.assign({}, restOfQueryConfig), optionsFromState);\n                const options = removeEmptyFacetsAndFilters(withQueryConfigOptions);\n                promises.push(this.beforeAutocompleteResultsCall(options, (newOptions) => {\n                    return this.client\n                        .search(query, Object.assign(Object.assign({}, newOptions), { record_analytics: false }))\n                        .then((response) => {\n                        autocompletedState.autocompletedResults =\n                            adaptResponse(response).results;\n                        autocompletedState.autocompletedResultsRequestId =\n                            response.info.meta.request_id;\n                    });\n                }));\n            }\n            if (queryConfig.suggestions) {\n                const options = queryConfig.suggestions;\n                promises.push(this.beforeAutocompleteSuggestionsCall(options, (newOptions) => this.client\n                    .querySuggestion(searchTerm, newOptions)\n                    .then((response) => {\n                    autocompletedState.autocompletedSuggestions = response.results;\n                    autocompletedState.autocompletedSuggestionsRequestId =\n                        response.meta.request_id;\n                })));\n            }\n            yield Promise.all(promises);\n            return autocompletedState;\n        });\n    }\n}\nexport default AppSearchAPIConnector;\n"]},"metadata":{},"sourceType":"module"}