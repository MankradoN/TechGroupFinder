{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from \"react\";\nimport { SearchBox } from \"@elastic/react-search-ui-views\";\nimport { withSearch } from \"..\";\nexport class SearchBoxContainer extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false\n    };\n\n    this.handleFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this.handleBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n\n    this.completeSuggestion = searchTerm => {\n      const {\n        shouldClearFilters,\n        setSearchTerm\n      } = this.props;\n      setSearchTerm(searchTerm, {\n        shouldClearFilters\n      });\n    };\n\n    this.handleSubmit = e => {\n      const {\n        shouldClearFilters,\n        searchTerm,\n        setSearchTerm\n      } = this.props;\n      e.preventDefault();\n      setSearchTerm(searchTerm, {\n        shouldClearFilters\n      });\n    };\n\n    this.handleChange = value => {\n      const {\n        autocompleteMinimumCharacters,\n        autocompleteResults,\n        autocompleteSuggestions,\n        shouldClearFilters,\n        searchAsYouType,\n        setSearchTerm,\n        debounceLength\n      } = this.props;\n      const options = Object.assign(Object.assign({\n        autocompleteMinimumCharacters\n      }, (autocompleteResults || autocompleteSuggestions || searchAsYouType) && {\n        debounce: debounceLength || 200\n      }), {\n        shouldClearFilters,\n        refresh: !!searchAsYouType,\n        autocompleteResults: !!autocompleteResults,\n        autocompleteSuggestions: !!autocompleteSuggestions\n      });\n      setSearchTerm(value, options);\n    };\n\n    this.handleNotifyAutocompleteSelected = selection => {\n      var _a;\n\n      const {\n        autocompleteResults,\n        trackAutocompleteClickThrough\n      } = this.props; // Because suggestions don't count as clickthroughs, only\n      // results\n\n      if (autocompleteResults) {\n        const autocompleteResultsConfig = autocompleteResults === true ? {\n          clickThroughTags: [],\n          shouldTrackClickThrough: true\n        } : autocompleteResults;\n\n        if (!selection.suggestion && autocompleteResultsConfig.shouldTrackClickThrough !== false) {\n          const {\n            clickThroughTags = []\n          } = autocompleteResultsConfig;\n          const id = (_a = selection.id) === null || _a === void 0 ? void 0 : _a.raw;\n          trackAutocompleteClickThrough(id, clickThroughTags);\n        }\n      }\n    };\n\n    this.defaultOnSelectAutocomplete = selection => {\n      if (!selection) return;\n      const {\n        autocompleteResults\n      } = this.props;\n      this.handleNotifyAutocompleteSelected(selection);\n\n      if (!selection.suggestion && typeof autocompleteResults !== \"boolean\") {\n        const url = selection[autocompleteResults.urlField] ? selection[autocompleteResults.urlField].raw : \"\";\n\n        if (url) {\n          const target = typeof autocompleteResults !== \"boolean\" && autocompleteResults.linkTarget || \"_self\";\n          window.open(url, target);\n        }\n      } else {\n        this.completeSuggestion(selection.suggestion);\n      }\n    };\n  }\n\n  render() {\n    const {\n      isFocused\n    } = this.state;\n\n    const _a = this.props,\n          {\n      autocompleteMinimumCharacters,\n      autocompleteResults,\n      autocompleteSuggestions,\n      autocompletedResults,\n      autocompletedSuggestions,\n      className,\n      autocompleteView,\n      inputProps,\n      inputView,\n      onSelectAutocomplete,\n      onSubmit,\n      searchTerm,\n      view\n    } = _a,\n          rest = __rest(_a, [\"autocompleteMinimumCharacters\", \"autocompleteResults\", \"autocompleteSuggestions\", \"autocompletedResults\", \"autocompletedSuggestions\", \"className\", \"autocompleteView\", \"inputProps\", \"inputView\", \"onSelectAutocomplete\", \"onSubmit\", \"searchTerm\", \"view\"]);\n\n    const View = view || SearchBox;\n    const useAutocomplete = (!!autocompleteResults || !!autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters;\n    const autocompletedSuggestionsCount = Object.entries(autocompletedSuggestions // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ).reduce((acc, _ref) => {\n      let [_, value] = _ref;\n      return acc + value.length;\n    }, 0);\n    const allAutocompletedItemsCount = autocompletedSuggestionsCount + autocompletedResults.length;\n    let handleOnSelectAutocomplete;\n\n    if (onSelectAutocomplete) {\n      handleOnSelectAutocomplete = selection => {\n        onSelectAutocomplete(selection, {\n          notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected,\n          completeSuggestion: this.completeSuggestion,\n          autocompleteResults: this.props.autocompleteResults\n        }, this.defaultOnSelectAutocomplete);\n      };\n    }\n\n    const viewProps = Object.assign({\n      allAutocompletedItemsCount: allAutocompletedItemsCount,\n      autocompleteView,\n      autocompleteResults: autocompleteResults,\n      autocompleteSuggestions: autocompleteSuggestions,\n      autocompletedResults: autocompletedResults,\n      autocompletedSuggestions: autocompletedSuggestions,\n      className,\n      autocompletedSuggestionsCount: autocompletedSuggestionsCount,\n      completeSuggestion: this.completeSuggestion,\n      isFocused: isFocused,\n      notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected,\n      onChange: value => this.handleChange(value),\n      onSelectAutocomplete: handleOnSelectAutocomplete || this.defaultOnSelectAutocomplete,\n      onSubmit: onSubmit ? e => {\n        e.preventDefault();\n        onSubmit(searchTerm);\n      } : this.handleSubmit,\n      useAutocomplete: useAutocomplete,\n      value: searchTerm,\n      inputProps: Object.assign({\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur\n      }, inputProps),\n      inputView\n    }, rest);\n    return React.createElement(View, Object.assign({}, viewProps));\n  }\n\n}\nSearchBoxContainer.defaultProps = {\n  autocompleteMinimumCharacters: 0,\n  shouldClearFilters: true\n};\nexport default withSearch(_ref2 => {\n  let {\n    autocompletedResults,\n    autocompletedSuggestions,\n    searchTerm,\n    setSearchTerm,\n    trackAutocompleteClickThrough\n  } = _ref2;\n  return {\n    autocompletedResults,\n    autocompletedSuggestions,\n    searchTerm,\n    setSearchTerm,\n    trackAutocompleteClickThrough\n  };\n})(SearchBoxContainer);","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/my-app/node_modules/@elastic/react-search-ui/lib/esm/containers/SearchBox.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","Component","SearchBox","withSearch","SearchBoxContainer","constructor","arguments","state","isFocused","handleFocus","setState","handleBlur","completeSuggestion","searchTerm","shouldClearFilters","setSearchTerm","props","handleSubmit","preventDefault","handleChange","value","autocompleteMinimumCharacters","autocompleteResults","autocompleteSuggestions","searchAsYouType","debounceLength","options","assign","debounce","refresh","handleNotifyAutocompleteSelected","selection","_a","trackAutocompleteClickThrough","autocompleteResultsConfig","clickThroughTags","shouldTrackClickThrough","suggestion","id","raw","defaultOnSelectAutocomplete","url","urlField","target","linkTarget","window","open","render","autocompletedResults","autocompletedSuggestions","className","autocompleteView","inputProps","inputView","onSelectAutocomplete","onSubmit","view","rest","View","useAutocomplete","autocompletedSuggestionsCount","entries","reduce","acc","_","allAutocompletedItemsCount","handleOnSelectAutocomplete","notifyAutocompleteSelected","viewProps","onChange","onFocus","onBlur","createElement","defaultProps"],"mappings":"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","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { Component } from \"react\";\nimport { SearchBox } from \"@elastic/react-search-ui-views\";\nimport { withSearch } from \"..\";\nexport class SearchBoxContainer extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            isFocused: false\n        };\n        this.handleFocus = () => {\n            this.setState({\n                isFocused: true\n            });\n        };\n        this.handleBlur = () => {\n            this.setState({\n                isFocused: false\n            });\n        };\n        this.completeSuggestion = (searchTerm) => {\n            const { shouldClearFilters, setSearchTerm } = this.props;\n            setSearchTerm(searchTerm, {\n                shouldClearFilters\n            });\n        };\n        this.handleSubmit = (e) => {\n            const { shouldClearFilters, searchTerm, setSearchTerm } = this.props;\n            e.preventDefault();\n            setSearchTerm(searchTerm, {\n                shouldClearFilters\n            });\n        };\n        this.handleChange = (value) => {\n            const { autocompleteMinimumCharacters, autocompleteResults, autocompleteSuggestions, shouldClearFilters, searchAsYouType, setSearchTerm, debounceLength } = this.props;\n            const options = Object.assign(Object.assign({ autocompleteMinimumCharacters }, ((autocompleteResults ||\n                autocompleteSuggestions ||\n                searchAsYouType) && {\n                debounce: debounceLength || 200\n            })), { shouldClearFilters, refresh: !!searchAsYouType, autocompleteResults: !!autocompleteResults, autocompleteSuggestions: !!autocompleteSuggestions });\n            setSearchTerm(value, options);\n        };\n        this.handleNotifyAutocompleteSelected = (selection) => {\n            var _a;\n            const { autocompleteResults, trackAutocompleteClickThrough } = this.props;\n            // Because suggestions don't count as clickthroughs, only\n            // results\n            if (autocompleteResults) {\n                const autocompleteResultsConfig = autocompleteResults === true\n                    ? { clickThroughTags: [], shouldTrackClickThrough: true }\n                    : autocompleteResults;\n                if (!selection.suggestion &&\n                    autocompleteResultsConfig.shouldTrackClickThrough !== false) {\n                    const { clickThroughTags = [] } = autocompleteResultsConfig;\n                    const id = (_a = selection.id) === null || _a === void 0 ? void 0 : _a.raw;\n                    trackAutocompleteClickThrough(id, clickThroughTags);\n                }\n            }\n        };\n        this.defaultOnSelectAutocomplete = (selection) => {\n            if (!selection)\n                return;\n            const { autocompleteResults } = this.props;\n            this.handleNotifyAutocompleteSelected(selection);\n            if (!selection.suggestion && typeof autocompleteResults !== \"boolean\") {\n                const url = selection[autocompleteResults.urlField]\n                    ? selection[autocompleteResults.urlField].raw\n                    : \"\";\n                if (url) {\n                    const target = (typeof autocompleteResults !== \"boolean\" &&\n                        autocompleteResults.linkTarget) ||\n                        \"_self\";\n                    window.open(url, target);\n                }\n            }\n            else {\n                this.completeSuggestion(selection.suggestion);\n            }\n        };\n    }\n    render() {\n        const { isFocused } = this.state;\n        const _a = this.props, { autocompleteMinimumCharacters, autocompleteResults, autocompleteSuggestions, autocompletedResults, autocompletedSuggestions, className, autocompleteView, inputProps, inputView, onSelectAutocomplete, onSubmit, searchTerm, view } = _a, rest = __rest(_a, [\"autocompleteMinimumCharacters\", \"autocompleteResults\", \"autocompleteSuggestions\", \"autocompletedResults\", \"autocompletedSuggestions\", \"className\", \"autocompleteView\", \"inputProps\", \"inputView\", \"onSelectAutocomplete\", \"onSubmit\", \"searchTerm\", \"view\"]);\n        const View = view || SearchBox;\n        const useAutocomplete = (!!autocompleteResults || !!autocompleteSuggestions) &&\n            searchTerm.length >= autocompleteMinimumCharacters;\n        const autocompletedSuggestionsCount = Object.entries(autocompletedSuggestions\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        ).reduce((acc, [_, value]) => acc + value.length, 0);\n        const allAutocompletedItemsCount = autocompletedSuggestionsCount + autocompletedResults.length;\n        let handleOnSelectAutocomplete;\n        if (onSelectAutocomplete) {\n            handleOnSelectAutocomplete = (selection) => {\n                onSelectAutocomplete(selection, {\n                    notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected,\n                    completeSuggestion: this.completeSuggestion,\n                    autocompleteResults: this.props.autocompleteResults\n                }, this.defaultOnSelectAutocomplete);\n            };\n        }\n        const viewProps = Object.assign({ allAutocompletedItemsCount: allAutocompletedItemsCount, autocompleteView, autocompleteResults: autocompleteResults, autocompleteSuggestions: autocompleteSuggestions, autocompletedResults: autocompletedResults, autocompletedSuggestions: autocompletedSuggestions, className, autocompletedSuggestionsCount: autocompletedSuggestionsCount, completeSuggestion: this.completeSuggestion, isFocused: isFocused, notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected, onChange: (value) => this.handleChange(value), onSelectAutocomplete: handleOnSelectAutocomplete || this.defaultOnSelectAutocomplete, onSubmit: onSubmit\n                ? (e) => {\n                    e.preventDefault();\n                    onSubmit(searchTerm);\n                }\n                : this.handleSubmit, useAutocomplete: useAutocomplete, value: searchTerm, inputProps: Object.assign({ onFocus: this.handleFocus, onBlur: this.handleBlur }, inputProps), inputView }, rest);\n        return React.createElement(View, Object.assign({}, viewProps));\n    }\n}\nSearchBoxContainer.defaultProps = {\n    autocompleteMinimumCharacters: 0,\n    shouldClearFilters: true\n};\nexport default withSearch(({ autocompletedResults, autocompletedSuggestions, searchTerm, setSearchTerm, trackAutocompleteClickThrough }) => ({\n    autocompletedResults,\n    autocompletedSuggestions,\n    searchTerm,\n    setSearchTerm,\n    trackAutocompleteClickThrough\n}))(SearchBoxContainer);\n"]},"metadata":{},"sourceType":"module"}