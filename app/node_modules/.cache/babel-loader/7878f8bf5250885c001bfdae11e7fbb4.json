{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\n\nfunction Option(props) {\n  return React.createElement(components.Option, Object.assign({}, props), React.createElement(\"span\", {\n    className: \"sui-select__option-label\"\n  }, props.data.label), React.createElement(\"span\", {\n    className: \"sui-select__option-count\"\n  }, props.data.count.toLocaleString(\"en\")));\n}\n\nOption.propTypes = {\n  data: PropTypes.object.isRequired\n};\n\nfunction toSelectBoxOption(filterValue) {\n  return {\n    value: filterValue.value,\n    label: getFilterValueDisplay(filterValue.value),\n    count: filterValue.count\n  };\n}\n\nconst setDefaultStyle = {\n  option: () => ({}),\n  control: () => ({}),\n  dropdownIndicator: () => ({}),\n  indicatorSeparator: () => ({})\n};\n\nfunction SingleSelectFacet(_ref) {\n  let {\n    className,\n    label,\n    onChange,\n    options\n  } = _ref;\n  let selectedSelectBoxOption;\n  let isSelectedSelectBoxOptionSet = false;\n  const selectBoxOptions = options.map(option => {\n    const selectBoxOption = toSelectBoxOption(option); // There should never be multiple filters set for this facet because it is single select,\n    // but if there is, we use the first value.\n\n    if (option.selected && !isSelectedSelectBoxOptionSet) {\n      selectedSelectBoxOption = selectBoxOption;\n      isSelectedSelectBoxOptionSet = true;\n    }\n\n    return selectBoxOption;\n  });\n  return React.createElement(\"div\", {\n    className: appendClassName(\"sui-facet\", className)\n  }, React.createElement(\"div\", {\n    className: \"sui-facet__title\"\n  }, label), React.createElement(Select, {\n    className: \"sui-select\",\n    classNamePrefix: \"sui-select\",\n    components: {\n      Option: props => {\n        props.innerProps[\"data-transaction-name\"] = `facet - ${label}`;\n        return Option(props);\n      }\n    },\n    value: selectedSelectBoxOption,\n    onChange: o => onChange(o.value),\n    options: selectBoxOptions,\n    isSearchable: false,\n    styles: setDefaultStyle\n  }));\n}\n\nexport default SingleSelectFacet;","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/node_modules/@elastic/react-search-ui-views/lib/esm/SingleSelectFacet.js"],"names":["PropTypes","React","Select","components","getFilterValueDisplay","appendClassName","Option","props","createElement","Object","assign","className","data","label","count","toLocaleString","propTypes","object","isRequired","toSelectBoxOption","filterValue","value","setDefaultStyle","option","control","dropdownIndicator","indicatorSeparator","SingleSelectFacet","onChange","options","selectedSelectBoxOption","isSelectedSelectBoxOptionSet","selectBoxOptions","map","selectBoxOption","selected","classNamePrefix","innerProps","o","isSearchable","styles"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Select, { components } from \"react-select\";\nimport { getFilterValueDisplay } from \"./view-helpers\";\nimport { appendClassName } from \"./view-helpers\";\nfunction Option(props) {\n    return (React.createElement(components.Option, Object.assign({}, props),\n        React.createElement(\"span\", { className: \"sui-select__option-label\" }, props.data.label),\n        React.createElement(\"span\", { className: \"sui-select__option-count\" }, props.data.count.toLocaleString(\"en\"))));\n}\nOption.propTypes = {\n    data: PropTypes.object.isRequired\n};\nfunction toSelectBoxOption(filterValue) {\n    return {\n        value: filterValue.value,\n        label: getFilterValueDisplay(filterValue.value),\n        count: filterValue.count\n    };\n}\nconst setDefaultStyle = {\n    option: () => ({}),\n    control: () => ({}),\n    dropdownIndicator: () => ({}),\n    indicatorSeparator: () => ({})\n};\nfunction SingleSelectFacet({ className, label, onChange, options }) {\n    let selectedSelectBoxOption;\n    let isSelectedSelectBoxOptionSet = false;\n    const selectBoxOptions = options.map((option) => {\n        const selectBoxOption = toSelectBoxOption(option);\n        // There should never be multiple filters set for this facet because it is single select,\n        // but if there is, we use the first value.\n        if (option.selected && !isSelectedSelectBoxOptionSet) {\n            selectedSelectBoxOption = selectBoxOption;\n            isSelectedSelectBoxOptionSet = true;\n        }\n        return selectBoxOption;\n    });\n    return (React.createElement(\"div\", { className: appendClassName(\"sui-facet\", className) },\n        React.createElement(\"div\", { className: \"sui-facet__title\" }, label),\n        React.createElement(Select, { className: \"sui-select\", classNamePrefix: \"sui-select\", components: {\n                Option: (props) => {\n                    props.innerProps[\"data-transaction-name\"] = `facet - ${label}`;\n                    return Option(props);\n                }\n            }, value: selectedSelectBoxOption, onChange: (o) => onChange(o.value), options: selectBoxOptions, isSearchable: false, styles: setDefaultStyle })));\n}\nexport default SingleSelectFacet;\n"]},"metadata":{},"sourceType":"module"}