{"ast":null,"code":"/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value FilterValue to apply\n * @param type String (Optional) type of filter to apply\n */\nexport default function setFilter(name, value) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"all\";\n  // eslint-disable-next-line no-console\n  if (this.debug) console.log(\"Search UI: Action\", \"setFilter\", ...arguments);\n  let {\n    filters\n  } = this.state;\n  filters = filters.filter(filter => filter.field !== name || filter.type !== type);\n\n  this._updateSearchResults({\n    current: 1,\n    filters: [...filters, {\n      field: name,\n      values: [value],\n      type\n    }]\n  });\n}","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/node_modules/@elastic/search-ui/lib/esm/actions/setFilter.js"],"names":["setFilter","name","value","type","debug","console","log","arguments","filters","state","filter","field","_updateSearchResults","current","values"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAA8C;AAAA,MAAdC,IAAc,uEAAP,KAAO;AACzD;AACA,MAAI,KAAKC,KAAT,EACIC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,WAAjC,EAA8C,GAAGC,SAAjD;AACJ,MAAI;AAAEC,IAAAA;AAAF,MAAc,KAAKC,KAAvB;AACAD,EAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAgBA,MAAD,IAAYA,MAAM,CAACC,KAAP,KAAiBV,IAAjB,IAAyBS,MAAM,CAACP,IAAP,KAAgBA,IAApE,CAAV;;AACA,OAAKS,oBAAL,CAA0B;AACtBC,IAAAA,OAAO,EAAE,CADa;AAEtBL,IAAAA,OAAO,EAAE,CACL,GAAGA,OADE,EAEL;AACIG,MAAAA,KAAK,EAAEV,IADX;AAEIa,MAAAA,MAAM,EAAE,CAACZ,KAAD,CAFZ;AAGIC,MAAAA;AAHJ,KAFK;AAFa,GAA1B;AAWH","sourcesContent":["/**\n * Filter results - Replaces current filter value\n *\n * Will trigger new search\n *\n * @param name String field name to filter on\n * @param value FilterValue to apply\n * @param type String (Optional) type of filter to apply\n */\nexport default function setFilter(name, value, type = \"all\") {\n    // eslint-disable-next-line no-console\n    if (this.debug)\n        console.log(\"Search UI: Action\", \"setFilter\", ...arguments);\n    let { filters } = this.state;\n    filters = filters.filter((filter) => filter.field !== name || filter.type !== type);\n    this._updateSearchResults({\n        current: 1,\n        filters: [\n            ...filters,\n            {\n                field: name,\n                values: [value],\n                type\n            }\n        ]\n    });\n}\n"]},"metadata":{},"sourceType":"module"}