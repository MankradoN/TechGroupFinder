{"ast":null,"code":"function isTypeNumber(value) {\n  return value !== undefined && value !== null && typeof value === \"number\";\n}\n\nfunction isTypeBoolean(value) {\n  return value && typeof value === \"boolean\";\n}\n\nfunction toBoolean(value) {\n  if (value === \"true\") return true;\n  if (value === \"false\") return false;\n  throw \"Invalid type parsed as Boolean value\";\n}\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\n\n\nexport default {\n  encode(value, encode) {\n    if (isTypeNumber(value)) {\n      return `n_${value}_n`;\n    }\n\n    if (isTypeBoolean(value)) {\n      return `b_${value}_b`;\n    }\n\n    return encode(value);\n  },\n\n  decode(value, decode) {\n    //eslint-disable-next-line\n    if (/n_-?[\\d\\.]*_n/.test(value)) {\n      const numericValueString = value.substring(2, value.length - 2);\n      return Number(numericValueString);\n    }\n\n    if (/^b_(true|false)*_b$/.test(value)) {\n      const booleanValueString = value.substring(2, value.length - 2);\n      return toBoolean(booleanValueString);\n    }\n\n    return decode(value);\n  }\n\n};","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/my-app/node_modules/@elastic/search-ui/lib/esm/preserveTypesEncoder.js"],"names":["isTypeNumber","value","undefined","isTypeBoolean","toBoolean","encode","decode","test","numericValueString","substring","length","Number","booleanValueString"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAOA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAAjC,IAAyC,OAAOA,KAAP,KAAiB,QAAjE;AACH;;AACD,SAASE,aAAT,CAAuBF,KAAvB,EAA8B;AAC1B,SAAOA,KAAK,IAAI,OAAOA,KAAP,KAAiB,SAAjC;AACH;;AACD,SAASG,SAAT,CAAmBH,KAAnB,EAA0B;AACtB,MAAIA,KAAK,KAAK,MAAd,EACI,OAAO,IAAP;AACJ,MAAIA,KAAK,KAAK,OAAd,EACI,OAAO,KAAP;AACJ,QAAM,sCAAN;AACH;AACD;AACA;;;AACA,eAAe;AACXI,EAAAA,MAAM,CAACJ,KAAD,EAAQI,MAAR,EAAgB;AAClB,QAAIL,YAAY,CAACC,KAAD,CAAhB,EAAyB;AACrB,aAAQ,KAAIA,KAAM,IAAlB;AACH;;AACD,QAAIE,aAAa,CAACF,KAAD,CAAjB,EAA0B;AACtB,aAAQ,KAAIA,KAAM,IAAlB;AACH;;AACD,WAAOI,MAAM,CAACJ,KAAD,CAAb;AACH,GATU;;AAUXK,EAAAA,MAAM,CAACL,KAAD,EAAQK,MAAR,EAAgB;AAClB;AACA,QAAI,gBAAgBC,IAAhB,CAAqBN,KAArB,CAAJ,EAAiC;AAC7B,YAAMO,kBAAkB,GAAGP,KAAK,CAACQ,SAAN,CAAgB,CAAhB,EAAmBR,KAAK,CAACS,MAAN,GAAe,CAAlC,CAA3B;AACA,aAAOC,MAAM,CAACH,kBAAD,CAAb;AACH;;AACD,QAAI,sBAAsBD,IAAtB,CAA2BN,KAA3B,CAAJ,EAAuC;AACnC,YAAMW,kBAAkB,GAAGX,KAAK,CAACQ,SAAN,CAAgB,CAAhB,EAAmBR,KAAK,CAACS,MAAN,GAAe,CAAlC,CAA3B;AACA,aAAON,SAAS,CAACQ,kBAAD,CAAhB;AACH;;AACD,WAAON,MAAM,CAACL,KAAD,CAAb;AACH;;AArBU,CAAf","sourcesContent":["function isTypeNumber(value) {\n    return value !== undefined && value !== null && typeof value === \"number\";\n}\nfunction isTypeBoolean(value) {\n    return value && typeof value === \"boolean\";\n}\nfunction toBoolean(value) {\n    if (value === \"true\")\n        return true;\n    if (value === \"false\")\n        return false;\n    throw \"Invalid type parsed as Boolean value\";\n}\n/* Encoder for qs library which preserve number types on the URL. Numbers\nare padded with \"n_{number}_n\", and booleans with \"b_{boolean}_b\"*/\nexport default {\n    encode(value, encode) {\n        if (isTypeNumber(value)) {\n            return `n_${value}_n`;\n        }\n        if (isTypeBoolean(value)) {\n            return `b_${value}_b`;\n        }\n        return encode(value);\n    },\n    decode(value, decode) {\n        //eslint-disable-next-line\n        if (/n_-?[\\d\\.]*_n/.test(value)) {\n            const numericValueString = value.substring(2, value.length - 2);\n            return Number(numericValueString);\n        }\n        if (/^b_(true|false)*_b$/.test(value)) {\n            const booleanValueString = value.substring(2, value.length - 2);\n            return toBoolean(booleanValueString);\n        }\n        return decode(value);\n    }\n};\n"]},"metadata":{},"sourceType":"module"}