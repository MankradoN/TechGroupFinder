{"ast":null,"code":"const VALID_PROTOCOLS = [\"http:\", \"https:\"];\n/**\n *\n * @param {URL} URLParser URL interface provided by browser https://developer.mozilla.org/en-US/docs/Web/API/URL\n * @param {String} currentLocation String representation of the browser's current location\n */\n\nexport default function getUrlSanitizer(URLParser, currentLocation) {\n  // This function is curried so that dependencies can be injected and don't need to be mocked in tests.\n  return url => {\n    let parsedUrl;\n\n    try {\n      // Attempts to parse a URL as relative\n      parsedUrl = new URLParser(url, currentLocation); // eslint-disable-next-line no-empty\n    } catch (e) {}\n\n    return VALID_PROTOCOLS.includes(parsedUrl.protocol) ? url : \"\";\n  };\n}","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/node_modules/@elastic/react-search-ui-views/lib/esm/view-helpers/getUrlSanitizer.js"],"names":["VALID_PROTOCOLS","getUrlSanitizer","URLParser","currentLocation","url","parsedUrl","e","includes","protocol"],"mappings":"AAAA,MAAMA,eAAe,GAAG,CAAC,OAAD,EAAU,QAAV,CAAxB;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,eAApC,EAAqD;AAChE;AACA,SAAQC,GAAD,IAAS;AACZ,QAAIC,SAAJ;;AACA,QAAI;AACA;AACAA,MAAAA,SAAS,GAAG,IAAIH,SAAJ,CAAcE,GAAd,EAAmBD,eAAnB,CAAZ,CAFA,CAGA;AACH,KAJD,CAKA,OAAOG,CAAP,EAAU,CAAG;;AACb,WAAON,eAAe,CAACO,QAAhB,CAAyBF,SAAS,CAACG,QAAnC,IAA+CJ,GAA/C,GAAqD,EAA5D;AACH,GATD;AAUH","sourcesContent":["const VALID_PROTOCOLS = [\"http:\", \"https:\"];\n/**\n *\n * @param {URL} URLParser URL interface provided by browser https://developer.mozilla.org/en-US/docs/Web/API/URL\n * @param {String} currentLocation String representation of the browser's current location\n */\nexport default function getUrlSanitizer(URLParser, currentLocation) {\n    // This function is curried so that dependencies can be injected and don't need to be mocked in tests.\n    return (url) => {\n        let parsedUrl;\n        try {\n            // Attempts to parse a URL as relative\n            parsedUrl = new URLParser(url, currentLocation);\n            // eslint-disable-next-line no-empty\n        }\n        catch (e) { }\n        return VALID_PROTOCOLS.includes(parsedUrl.protocol) ? url : \"\";\n    };\n}\n"]},"metadata":{},"sourceType":"module"}