{"ast":null,"code":"/**\n * minimal debounce function\n *\n * mostly for not spamming the server with requests when\n * searching with type ahead\n */\nfunction debounce(func, wait) {\n  let timeout;\n\n  const debouncedFn = function () {\n    const args = arguments; //eslint-disable-line\n\n    const later = () => {\n      func.apply(null, args); //eslint-disable-line\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n\n  debouncedFn.cancel = () => {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debouncedFn;\n}\n\nclass DebounceManager {\n  constructor() {\n    this.debounceCache = {};\n  }\n  /**\n   * Dynamically debounce and cache a debounced version of a function at the time of calling that function. This avoids\n   * managing debounced version of functions locally.\n   *\n   * In other words, debounce usually works by debouncing based on\n   * referential identity of a function. This works by comparing provided function names.\n   *\n   * This also has the ability to short-circuit a debounce all-together, if no wait\n   * time is provided.\n   *\n   * Assumption:\n   * Functions are debounced on a combination of unique function name and wait times. So debouncing won't work on\n   * subsequent calls with different wait times or different functions. That also means that the debounce manager\n   * can be used for different functions in parallel, and keep the two functions debounced separately.\n   *\n   * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.\n   * @param {function} fn Function to debounce\n   * @param {function} functionName Name of function to debounce, used to create a unique key\n   * @param {...any} parameters Parameters to pass to function\n   */\n  // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\n\n  runWithDebounce(wait, functionName, fn) {\n    for (var _len = arguments.length, parameters = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      parameters[_key - 3] = arguments[_key];\n    }\n\n    if (!wait) {\n      return fn(...parameters);\n    }\n\n    const key = `${functionName}|${wait.toString()}`;\n    let debounced = this.debounceCache[key];\n\n    if (!debounced) {\n      this.debounceCache[key] = debounce(fn, wait);\n      debounced = this.debounceCache[key];\n    }\n\n    debounced(...parameters);\n  }\n  /**\n   * Cancels existing debounced function calls.\n   *\n   * This will cancel any debounced function call, regardless of the debounce length that was provided.\n   *\n   * For example, making the following series of calls will create multiple debounced functions, because\n   * they are cached by a combination of unique name and debounce length.\n   *\n   * runWithDebounce(1000, \"_updateSearchResults\", this._updateSearchResults)\n   * runWithDebounce(500, \"_updateSearchResults\", this._updateSearchResults)\n   * runWithDebounce(1000, \"_updateSearchResults\", this._updateSearchResults)\n   *\n   * Calling the following will cancel all of those, if they have not yet executed:\n   *\n   * cancelByName(\"_updateSearchResults\")\n   *\n   * @param {string} functionName The name of the function that was debounced. This needs to match exactly what was provided\n   * when runWithDebounce was called originally.\n   */\n\n\n  cancelByName(functionName) {\n    Object.entries(this.debounceCache).filter(_ref => {\n      let [cachedKey] = _ref;\n      return cachedKey.startsWith(`${functionName}|`);\n    }) // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .forEach(_ref2 => {\n      let [_, cachedValue] = _ref2;\n      return cachedValue.cancel();\n    });\n  }\n\n}\n/**\n * Perform a standard debounce\n *\n * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.\n * @param {function} fn Function to debounce\n */\n\n\nDebounceManager.debounce = (wait, fn) => {\n  return debounce(fn, wait);\n};\n\nexport default DebounceManager;","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/node_modules/@elastic/search-ui/lib/esm/DebounceManager.js"],"names":["debounce","func","wait","timeout","debouncedFn","args","arguments","later","apply","clearTimeout","setTimeout","cancel","DebounceManager","constructor","debounceCache","runWithDebounce","functionName","fn","parameters","key","toString","debounced","cancelByName","Object","entries","filter","cachedKey","startsWith","forEach","_","cachedValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AAC1B,MAAIC,OAAJ;;AACA,QAAMC,WAAW,GAAG,YAAY;AAC5B,UAAMC,IAAI,GAAGC,SAAb,CAD4B,CACJ;;AACxB,UAAMC,KAAK,GAAG,MAAM;AAChBN,MAAAA,IAAI,CAACO,KAAL,CAAW,IAAX,EAAiBH,IAAjB,EADgB,CACQ;AAC3B,KAFD;;AAGAI,IAAAA,YAAY,CAACN,OAAD,CAAZ;AACAA,IAAAA,OAAO,GAAGO,UAAU,CAACH,KAAD,EAAQL,IAAR,CAApB;AACH,GAPD;;AAQAE,EAAAA,WAAW,CAACO,MAAZ,GAAqB,MAAM;AACvB,QAAIR,OAAJ,EAAa;AACTM,MAAAA,YAAY,CAACN,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH;AACJ,GALD;;AAMA,SAAOC,WAAP;AACH;;AACD,MAAMQ,eAAN,CAAsB;AAClBC,EAAAA,WAAW,GAAG;AACV,SAAKC,aAAL,GAAqB,EAArB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;;;AACAC,EAAAA,eAAe,CAACb,IAAD,EAAOc,YAAP,EAAqBC,EAArB,EAAwC;AAAA,sCAAZC,UAAY;AAAZA,MAAAA,UAAY;AAAA;;AACnD,QAAI,CAAChB,IAAL,EAAW;AACP,aAAOe,EAAE,CAAC,GAAGC,UAAJ,CAAT;AACH;;AACD,UAAMC,GAAG,GAAI,GAAEH,YAAa,IAAGd,IAAI,CAACkB,QAAL,EAAgB,EAA/C;AACA,QAAIC,SAAS,GAAG,KAAKP,aAAL,CAAmBK,GAAnB,CAAhB;;AACA,QAAI,CAACE,SAAL,EAAgB;AACZ,WAAKP,aAAL,CAAmBK,GAAnB,IAA0BnB,QAAQ,CAACiB,EAAD,EAAKf,IAAL,CAAlC;AACAmB,MAAAA,SAAS,GAAG,KAAKP,aAAL,CAAmBK,GAAnB,CAAZ;AACH;;AACDE,IAAAA,SAAS,CAAC,GAAGH,UAAJ,CAAT;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACII,EAAAA,YAAY,CAACN,YAAD,EAAe;AACvBO,IAAAA,MAAM,CAACC,OAAP,CAAe,KAAKV,aAApB,EACKW,MADL,CACY;AAAA,UAAC,CAACC,SAAD,CAAD;AAAA,aAAiBA,SAAS,CAACC,UAAV,CAAsB,GAAEX,YAAa,GAArC,CAAjB;AAAA,KADZ,EAEI;AAFJ,KAGKY,OAHL,CAGa;AAAA,UAAC,CAACC,CAAD,EAAIC,WAAJ,CAAD;AAAA,aAAsBA,WAAW,CAACnB,MAAZ,EAAtB;AAAA,KAHb;AAIH;;AA7DiB;AA+DtB;AACA;AACA;AACA;AACA;AACA;;;AACAC,eAAe,CAACZ,QAAhB,GAA2B,CAACE,IAAD,EAAOe,EAAP,KAAc;AACrC,SAAOjB,QAAQ,CAACiB,EAAD,EAAKf,IAAL,CAAf;AACH,CAFD;;AAGA,eAAeU,eAAf","sourcesContent":["/**\n * minimal debounce function\n *\n * mostly for not spamming the server with requests when\n * searching with type ahead\n */\nfunction debounce(func, wait) {\n    let timeout;\n    const debouncedFn = function () {\n        const args = arguments; //eslint-disable-line\n        const later = () => {\n            func.apply(null, args); //eslint-disable-line\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n    debouncedFn.cancel = () => {\n        if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n        }\n    };\n    return debouncedFn;\n}\nclass DebounceManager {\n    constructor() {\n        this.debounceCache = {};\n    }\n    /**\n     * Dynamically debounce and cache a debounced version of a function at the time of calling that function. This avoids\n     * managing debounced version of functions locally.\n     *\n     * In other words, debounce usually works by debouncing based on\n     * referential identity of a function. This works by comparing provided function names.\n     *\n     * This also has the ability to short-circuit a debounce all-together, if no wait\n     * time is provided.\n     *\n     * Assumption:\n     * Functions are debounced on a combination of unique function name and wait times. So debouncing won't work on\n     * subsequent calls with different wait times or different functions. That also means that the debounce manager\n     * can be used for different functions in parallel, and keep the two functions debounced separately.\n     *\n     * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.\n     * @param {function} fn Function to debounce\n     * @param {function} functionName Name of function to debounce, used to create a unique key\n     * @param {...any} parameters Parameters to pass to function\n     */\n    // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n    runWithDebounce(wait, functionName, fn, ...parameters) {\n        if (!wait) {\n            return fn(...parameters);\n        }\n        const key = `${functionName}|${wait.toString()}`;\n        let debounced = this.debounceCache[key];\n        if (!debounced) {\n            this.debounceCache[key] = debounce(fn, wait);\n            debounced = this.debounceCache[key];\n        }\n        debounced(...parameters);\n    }\n    /**\n     * Cancels existing debounced function calls.\n     *\n     * This will cancel any debounced function call, regardless of the debounce length that was provided.\n     *\n     * For example, making the following series of calls will create multiple debounced functions, because\n     * they are cached by a combination of unique name and debounce length.\n     *\n     * runWithDebounce(1000, \"_updateSearchResults\", this._updateSearchResults)\n     * runWithDebounce(500, \"_updateSearchResults\", this._updateSearchResults)\n     * runWithDebounce(1000, \"_updateSearchResults\", this._updateSearchResults)\n     *\n     * Calling the following will cancel all of those, if they have not yet executed:\n     *\n     * cancelByName(\"_updateSearchResults\")\n     *\n     * @param {string} functionName The name of the function that was debounced. This needs to match exactly what was provided\n     * when runWithDebounce was called originally.\n     */\n    cancelByName(functionName) {\n        Object.entries(this.debounceCache)\n            .filter(([cachedKey]) => cachedKey.startsWith(`${functionName}|`))\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            .forEach(([_, cachedValue]) => cachedValue.cancel());\n    }\n}\n/**\n * Perform a standard debounce\n *\n * @param {number} wait Milliseconds to debounce. Executes immediately if falsey.\n * @param {function} fn Function to debounce\n */\nDebounceManager.debounce = (wait, fn) => {\n    return debounce(fn, wait);\n};\nexport default DebounceManager;\n"]},"metadata":{},"sourceType":"module"}