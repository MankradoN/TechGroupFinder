{"ast":null,"code":"/**\n * Set the current search term\n *\n * Will trigger new search\n *\n * @param searchTerm String\n * @param options Object Additional objects\n * @param autocompleteMinimumCharacters Number Only trigger autocomplete if\n * searchTerm has at least this number of characters\n * @param options.autocompleteResults Boolean Fetch autocomplete\n * results?\n * @param options.refresh Boolean Refresh search results?\n * @param options.debounce Length to debounce API calls\n */\nexport default function setSearchTerm(searchTerm) {\n  let {\n    autocompleteMinimumCharacters = 0,\n    autocompleteResults = false,\n    autocompleteSuggestions = false,\n    shouldClearFilters = true,\n    refresh = true,\n    debounce = 0\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (this.debug) // eslint-disable-next-line no-console\n    console.log(\"Search UI: Action\", \"setSearchTerm\", ...arguments);\n\n  this._setState({\n    searchTerm\n  });\n\n  if (refresh) {\n    this.debounceManager.runWithDebounce(debounce, \"_updateSearchResults\", this._updateSearchResults, Object.assign({\n      current: 1\n    }, shouldClearFilters && {\n      filters: []\n    }));\n  }\n\n  if ((autocompleteResults || autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters) {\n    this.debounceManager.runWithDebounce(debounce, \"_updateAutocomplete\", this._updateAutocomplete, searchTerm, {\n      autocompleteResults,\n      autocompleteSuggestions\n    });\n  }\n}","map":{"version":3,"sources":["/Users/mnaomi/Documents/TechGroupFinder/app/my-app/node_modules/@elastic/search-ui/lib/esm/actions/setSearchTerm.js"],"names":["setSearchTerm","searchTerm","autocompleteMinimumCharacters","autocompleteResults","autocompleteSuggestions","shouldClearFilters","refresh","debounce","debug","console","log","arguments","_setState","debounceManager","runWithDebounce","_updateSearchResults","Object","assign","current","filters","length","_updateAutocomplete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAT,CAAuBC,UAAvB,EAAsM;AAAA,MAAnK;AAAEC,IAAAA,6BAA6B,GAAG,CAAlC;AAAqCC,IAAAA,mBAAmB,GAAG,KAA3D;AAAkEC,IAAAA,uBAAuB,GAAG,KAA5F;AAAmGC,IAAAA,kBAAkB,GAAG,IAAxH;AAA8HC,IAAAA,OAAO,GAAG,IAAxI;AAA8IC,IAAAA,QAAQ,GAAG;AAAzJ,GAAmK,uEAAJ,EAAI;AACjN,MAAI,KAAKC,KAAT,EACI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,eAAjC,EAAkD,GAAGC,SAArD;;AACJ,OAAKC,SAAL,CAAe;AAAEX,IAAAA;AAAF,GAAf;;AACA,MAAIK,OAAJ,EAAa;AACT,SAAKO,eAAL,CAAqBC,eAArB,CAAqCP,QAArC,EAA+C,sBAA/C,EAAuE,KAAKQ,oBAA5E,EAAkGC,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd,EAA+Bb,kBAAkB,IAAI;AAAEc,MAAAA,OAAO,EAAE;AAAX,KAArD,CAAlG;AACH;;AACD,MAAI,CAAChB,mBAAmB,IAAIC,uBAAxB,KACAH,UAAU,CAACmB,MAAX,IAAqBlB,6BADzB,EACwD;AACpD,SAAKW,eAAL,CAAqBC,eAArB,CAAqCP,QAArC,EAA+C,qBAA/C,EAAsE,KAAKc,mBAA3E,EAAgGpB,UAAhG,EAA4G;AACxGE,MAAAA,mBADwG;AAExGC,MAAAA;AAFwG,KAA5G;AAIH;AACJ","sourcesContent":["/**\n * Set the current search term\n *\n * Will trigger new search\n *\n * @param searchTerm String\n * @param options Object Additional objects\n * @param autocompleteMinimumCharacters Number Only trigger autocomplete if\n * searchTerm has at least this number of characters\n * @param options.autocompleteResults Boolean Fetch autocomplete\n * results?\n * @param options.refresh Boolean Refresh search results?\n * @param options.debounce Length to debounce API calls\n */\nexport default function setSearchTerm(searchTerm, { autocompleteMinimumCharacters = 0, autocompleteResults = false, autocompleteSuggestions = false, shouldClearFilters = true, refresh = true, debounce = 0 } = {}) {\n    if (this.debug)\n        // eslint-disable-next-line no-console\n        console.log(\"Search UI: Action\", \"setSearchTerm\", ...arguments);\n    this._setState({ searchTerm });\n    if (refresh) {\n        this.debounceManager.runWithDebounce(debounce, \"_updateSearchResults\", this._updateSearchResults, Object.assign({ current: 1 }, (shouldClearFilters && { filters: [] })));\n    }\n    if ((autocompleteResults || autocompleteSuggestions) &&\n        searchTerm.length >= autocompleteMinimumCharacters) {\n        this.debounceManager.runWithDebounce(debounce, \"_updateAutocomplete\", this._updateAutocomplete, searchTerm, {\n            autocompleteResults,\n            autocompleteSuggestions\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}